#!/bin/sh
################################################################################
# runit stage 1 script
################################################################################

export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin

########################################

def_color="\\033[0;37m"		# light gray
msg_color="\\033[1;37m"		# white

term_color="\\033[1;34m"	# dark blue
dark_color="\\033[1;30m"	# dark gray
good_color="\\033[1;32m"	# light green
fail_color="\\033[1;31m"	# red

print_msg() {
	echo -e "${msg_color}${*}${def_color}"
	return 0
}

report_status() {
	echo -e -n "${term_color}"
	if ${*}; then
#>>>		sleep 2
		echo -e "${good_color}* ${dark_color}${*}${def_color}"
		return 0
	else
#>>>		sleep 2
		echo -e "${fail_color}* ${dark_color}${*}${def_color}"
		return 1
	fi
	return 0
}

emergency_shell() {
	echo -e "${fail_color}Starting emergency shell...${def_color}"
#>>>	sulogin
	HOME=/.g/.home /bin/bash
	echo -e "${fail_color}Restarting system...${def_color}"
	touch /.runit/reboot
	chmod 100 /.runit/reboot
	exit 100
}

################################################################################

print_msg "Creating device directory..."
#>>>report_status mount -n -t tmpfs					none /dev
make_devices() {
	[ ! -d /dev/.udev   ] && mkdir -m 0755 /dev/.udev
	[ ! -d /dev/pts     ] && mkdir -m 0755 /dev/pts
	[ ! -d /dev/shm     ] && mkdir -m 0755 /dev/shm
	[ ! -c /dev/console ] && mknod -m 0600 /dev/console	c 5  1
	[ ! -c /dev/kmsg    ] && mknod -m 0666 /dev/kmsg	c 1  11
	[ ! -c /dev/null    ] && mknod -m 0666 /dev/null	c 1  3
	[ ! -c /dev/random  ] && mknod -m 0666 /dev/random	c 1  8
	[ ! -c /dev/rtc     ] && mknod -m 0600 /dev/rtc		c 10 135
	[ ! -c /dev/tty0    ] && mknod -m 0600 /dev/tty0	c 4  0
	[ ! -c /dev/urandom ] && mknod -m 0666 /dev/urandom	c 1  9
	[ ! -c /dev/zero    ] && mknod -m 0666 /dev/zero	c 1  5
	[ ! -L /dev/core    ] && ln -fns /proc/kcore		/dev/core
	[ ! -L /dev/fd      ] && ln -fns /proc/self/fd		/dev/fd
	[ ! -L /dev/stderr  ] && ln -fns /proc/self/fd/2	/dev/stderr
	[ ! -L /dev/stdin   ] && ln -fns /proc/self/fd/0	/dev/stdin
	[ ! -L /dev/stdout  ] && ln -fns /proc/self/fd/1	/dev/stdout
	return 0
}
report_status make_devices
report_status mount -n -t devpts	-o noexec,nosuid	none /dev/pts
OPT="-o size=50%,mode=700"
report_status mount -n -t tmpfs ${OPT}	-o nodev,nosuid		none /dev/shm

print_msg "Mounting kernel filesystems..."
report_status mount -n -t proc		-o nodev,noexec,nosuid	none /proc
report_status mount -n -t sysfs		-o nodev,noexec,nosuid	none /sys

print_msg "Starting udev..."
report_status eval "echo >/proc/sys/kernel/hotplug"
report_status /sbin/udevd --daemon
report_status udevadm trigger
report_status udevadm settle --timeout=10

print_msg "Setting clock..."
report_status hwclock --debug --hctosys --localtime

if [ -f /etc/sysctl.conf ]; then
	print_msg "Setting kernel variables..."
	report_status sysctl -p /etc/sysctl.conf
fi

if [ -f /etc/modules ]; then
	print_msg "Loading kernel modules..."
	for MODULE in $(grep -vE "^#" /etc/modules 2>/dev/null); do
		report_status modprobe -v ${MODULE}
	done
fi

print_msg "Setting hostname..."
[ -f /etc/hostname ]	&& HOSTNAME="$(cat /etc/hostname 2>/dev/null)"
[ -z "${HOSTNAME}" ]	&& HOSTNAME="$(hostname)"
[ -z "${HOSTNAME}" ]	&& HOSTNAME="localhost"
report_status hostname "${HOSTNAME}"

print_msg "Configuring keyboard and terminal..."
report_status loadkeys "us"
report_status unicode_start
report_status setterm -blank 10
report_status setterm -powerdown 30
report_status setterm -powersave off

print_msg "Checking and mounting root filesystem..."
report_status mount -n -o remount,ro	/			|| emergency_shell
report_status fsck -p -C -V		/			|| emergency_shell
report_status mount -n -o remount,rw	/			|| emergency_shell

print_msg "Creating new mtab..."
report_status rm -frv /etc/mtab
report_status mount -o remount /
#>>>report_status mount -o remount -t tmpfs		none /dev
report_status mount -o remount -t devpts	none /dev/pts
report_status mount -o remount -t tmpfs		none /dev/shm
report_status mount -o remount -t proc		none /proc
report_status mount            -t usbfs		none /proc/bus/usb
report_status mount -o remount -t sysfs		none /sys

print_msg "Checking and mounting remaining filesystems..."
report_status fsck -p -A -C -R -V				|| emergency_shell
report_status mount -a -t nodevpts,noproc,nosysfs,notmpfs	|| emergency_shell

print_msg "Managing important files..."
report_status eval "touch /var/log/wtmp"
report_status eval "touch /var/run/utmp"
report_status chown root:root /var/{log,run}/[uw]tmp
report_status chmod 644 /var/{log,run}/[uw]tmp

if [ -x "$(which alsamixer)" ] &&
   [ -f /etc/asound.state ]; then
	print_msg "Restoring alsa state..."
	restore_alsa_state() {
		RESULT="$(alsactl restore -f /etc/asound.state)"
		if [ -n "${RESULT}" ]; then
			echo "${RESULT}"
			return 1
		fi
		return 0
	}
	report_status restore_alsa_state
fi

########################################

print_msg "Setting up networking..."
report_status eval "HOME=/.g/.home /.g/.home/scripts/ip-setup"

print_msg "Mounting data filesystems..."
{
	report_status eval "HOME=/.g/.home perl -e 'alarm shift(@ARGV); exec(@ARGV);' 60 /.g/.home/scripts/_sync mount . sda"	;
	report_status eval "HOME=/.g/.home perl -e 'alarm shift(@ARGV); exec(@ARGV);' 60 /.g/.home/scripts/_sync mount g sdb"	;
} || {
	print_msg "${fail_color}!!! Data filesystems are not completely mounted !!!"	;
	sleep 10									;
}

########################################

exit 0
################################################################################
# end of file
################################################################################
